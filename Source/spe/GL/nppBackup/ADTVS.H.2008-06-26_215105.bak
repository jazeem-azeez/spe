# include <c:\spe\GL\bcm.h> // bitmap console manager
//# include <c:\spe\GL\button.h>
//# include <c:\spe\GL\mssgebox.h>
//# include <c:\spe\GL\shadle.cpp>
//# include <c:\spe\lib\vector.cpp>
//# include <gui.h>




void ldbar_perc()
{
char str[50];
char c=getcolor();
setcolor(WHITE);
settextjustify(LEFT_TEXT,BOTTOM_TEXT);
settextstyle(0, HORIZ_DIR,1);
sprintf(str, "Loading... %.2f %",(ldbarsize/(ldex-ldsx)*100));
setfillstyle(SOLID_FILL,BLACK);
bar(ldsx,ldsy-textheight(str),ldsx+textwidth(str),ldsy) ;
outtextxy(ldsx,ldsy-1,str);
setcolor(c);
}


int ldbar(int xtnd)
{
ldbarsize+=ldstep;
if((ldbarsize+ldsx)>ldex)
return 1;
//printf("\n%f ,%f",ldstep,ldbarsize);
rectangle(ldsx,ldsy,ldex,ldey);
if(xtnd==0)
{
setcolor(WHITE);
setfillstyle(SOLID_FILL,WHITE);
bar(ldsx,ldsy,ldex,ldey);
}
setfillstyle(SOLID_FILL,LIGHTBLUE);
bar(ldsx+1,ldsy+1,ldsx+ldbarsize,ldey-1);
return 0;
}

void setup_ldbar(int x,int y,int ex,int ey,int stps)
{
ldsx=x,ldsy=y,ldex=ex,ldey=ey,steps=stps   ;
ldbarsize=1;
ldstep=(float)(ldex-ldsx)/steps;
ldbar(0);
}
/***************************< Digital Num. Finder >*************************/
void digit_write(int left,int top,int NUM)
{
   setcolor(10);
   switch(NUM)
   {
   case 1:
	  line(left+11,top+2,left+11,top+9);
	  line(left+11,top+11,left+11,top+18);
	  break;
   case 2:
	   line(left,top,left+10,top);
	   line(left+11,top+2,left+11,top+9);
	   line(left+1,top+10,left+9,top+10);
	   line(left-1,top+11,left-1,top+18);
	   line(left,top+20,left+10,top+20);
	   break;
   case 3:
	   line(left,top,left+10,top);
	   line(left+11,top+2,left+11,top+9);
	   line(left+1,top+10,left+9,top+10);
	   line(left+11,top+11,left+11,top+18);
	   line(left,top+20,left+10,top+20);
	   break;
   case 4:
	   line(left-1,top+2,left-1,top+9);
	   line(left+11,top+2,left+11,top+9);
	   line(left+1,top+10,left+9,top+10);
	   line(left+11,top+11,left+11,top+18);
	   break;
   case 5:
	   line(left,top,left+10,top);
	   line(left-1,top+2,left-1,top+9);
	   line(left+1,top+10,left+9,top+10);
	   line(left+11,top+11,left+11,top+18);
	   line(left,top+20,left+10,top+20);
	   break;
   case 6:
	   line(left,top,left+10,top);
	   line(left-1,top+2,left-1,top+9);
	   line(left+1,top+10,left+9,top+10);
	   line(left-1,top+11,left-1,top+18);
	   line(left+11,top+11,left+11,top+18);
	   line(left,top+20,left+10,top+20);
	   break;
   case 7:
	   line(left,top,left+10,top);
	   line(left-1,top+2,left-1,top+9);
	   line(left+11,top+2,left+11,top+9);
	   line(left+11,top+11,left+11,top+18);
	   break;
   case 8:
	   line(left,top,left+10,top);
	   line(left-1,top+2,left-1,top+9);
	   line(left+11,top+2,left+11,top+9);
	   line(left+1,top+10,left+9,top+10);
	   line(left-1,top+11,left-1,top+18);
	   line(left+11,top+11,left+11,top+18);
	   line(left,top+20,left+10,top+20);
	   break;
   case 9:
	   line(left,top,left+10,top);
	   line(left-1,top+2,left-1,top+9);
	   line(left+11,top+2,left+11,top+9);
	   line(left+1,top+10,left+9,top+10);
	   line(left+11,top+11,left+11,top+18);
	   line(left,top+20,left+10,top+20);
	   break;
   case 0:
	   line(left,top,left+10,top);
	   line(left-1,top+2,left-1,top+9);
	   line(left+11,top+2,left+11,top+9);
	   line(left-1,top+11,left-1,top+18);
	   line(left+11,top+11,left+11,top+18);
	   line(left,top+20,left+10,top+20);
	   break;
   }
  setcolor(WHITE);
}
void digital(int x,int y,int n)
{

int a,b,c,d;
 if(n<10)
 {
 digit_write(x+15,y,0);
 digit_write(x+30,y,n);
 }

 if(n<100 && n>9)
 {
  a=n/10;b=n%10;
  digit_write(x+15,y,a);
  digit_write(x+30,y,b);
 }

  if(n<1000 && n>99)
 {
  a=n/100;
  b=n%10;
  c=(n-((a*100)+b))/10;
  digit_write(x+15,y,a);
  digit_write(x+30,y,c);
  digit_write(x+45,y,b);
 }
 
  if(n<10000 && n>999)
 {
  a=n/1000;
  b=n%10;

  c=(n-((a*1000)+b))/100;
  d=(n-((a*1000)+b+c*100))/10;

  digit_write(x,y,a);
  digit_write(x+15,y,c);
  digit_write(x+30,y,d);
  digit_write(x+45,y,b);
 }

  if(n<20000 && n>=10000)
 {
  a=n/10000;
  b=n%10;
  c=(n-((a*10000)+b))/1000;
  d=(n-((a*10000)+b+c*1000))/100;
  int e=(n-((a*10000)+b+(c*1000)+(d*100)))/10;
  digit_write(x,y,a);
  digit_write(x+15,y,c);
  digit_write(x+30,y,d);
  digit_write(x+45,y,e);
  digit_write(x+60,y,b);
}
}



FILE *out;
char datebuf[9];
char timebuf[9];
int logstatues;

void log(char msg[])
{
_strtime(timebuf);
    fputs("\nLog:->", out);
    fputs(timebuf,out);
    fputs("\n",out);
    fputs(msg,out);
    fputs("\n",out);
}

void shadowtxt(char Txt[],int TxtX,int TxtY,int TxtCol)
{
  setcolor(0);outtextxy(TxtX+1,TxtY+1,Txt);
  setcolor(TxtCol);outtextxy(TxtX,TxtY,Txt);
}

void showlog()
{
rewind(out);
while (!feof(out))
cout<<fgetc(out);
}

int startlog()
{
_strdate(datebuf);
_strtime(timebuf);
if ((out = fopen("logfile.log", "wt"))
    == NULL)
{
   fprintf(stderr, "Cannot open input file.\n");
   return 1;
}
logstatus=0;
//while (!feof(in))
   log("Started");
   return 0;
}

int closelog()
{
log("Closed");
fclose(out);
return 0;
}

void checkerrors(void)
{
   int errorcode;

   /* read result of last graphics operation */
   errorcode = graphresult();
   if (errorcode != grOk)
   {
      printf("Graphics error: %s\n", grapherrormsg(errorcode));
      printf("Press any key to halt:");
      getch();
      exit(1);
   }
}
/*
int fliptext(char word[64])

    {
    outtextxy(10, 1, word);
    for(x=10; x < 4 * 8 * strlen(word) + 8; x++)


		{
		for(y=0; y<30; y++)


			{
			col = getpixel(x, y);
			if(col > 0)


					{
					putpixel(x, 60 - y, 3);
					}
				}
			}
			getch();
	    }
*/
byte page=0;

void pageflip()
{
setvisualpage(page);
setactivepage(1-page);
page=1-page;
}
/*A Simple Funtion to load Bitmap*/
   struct palettetype far *pal=(void *) 0;
void Xldbmp(int x,int y ,char * file_name)
	{
	/* return a pointer to the default palette */
	   pal = getdefaultpalette();
	/* clean up */

		X.put_BMP(x,y,file_name);



						     /*
		setrgbpalette(0,0,0,0);

		setrgbpalette(1,0,0,128);

		setrgbpalette(2,0,128,0);

		setrgbpalette(3 ,0  ,128,128);

		setrgbpalette(4 ,128,000,000);

		setrgbpalette(5,128,000,128);

		 setrgbpalette(6 ,128,128,000);

		 setrgbpalette(7 ,192,192,192);

		 setrgbpalette(8 ,128,128,128);

		 setrgbpalette(9 ,000,000,225);

		 setrgbpalette(10,000,225,000);

		 setrgbpalette(11,000,225,225);

		 setrgbpalette(12 ,255,000,000);

		 setrgbpalette(13 ,255,000,255);

		 setrgbpalette(14 ,255,255,000);

		 setrgbpalette(15 ,255,255,255);   */

	}
int display_icon(int &sx,int &sy,char details[16])
{
	ldbmp(sx,sy,"icon.bmp");
	outtextxy(sx,sy+70,details);
	sx+=80;
	if(sx>=maxx)
	{sy+80;
	sx=60;
	}
	moveto(sx,sy);
	return 0;
}
int getpass(char  orginal_pass[18])
{
   /* request auto detection */
   int midx, midy, ht,wt;
   char byte;
   char pass_str[18],outstr[18];

   midx = getmaxx() / 2;
   midy = getmaxy() / 2;

   /* get information about current text settings */

   /* display the information */
   ht = textheight ("W");
   wt = textwidth  ("W");
   /* clean up */
   clearviewport();

   //draws rectangle to enter the password
   setcolor(GREEN);
   setbkcolor(BLACK);
   setfillstyle(SOLID_FILL,WHITE);

   settextjustify(CENTER_TEXT, CENTER_TEXT);

	setcolor(BLACK);
	bar(midx-(wt*10),midy-(ht),midx+(wt*10),midy+ht);
	setcolor(GREEN);
	rectangle(midx-(wt*10),midy-(ht),midx+(wt*10),midy+ht);

   int i =-1,j=0;
   for(pass_str[0]='\0';;)
   {

	byte=getch();
	i++;
	setcolor(BLACK);
	bar(midx-(wt*10),midy-(ht),midx+(wt*10),midy+ht);
	setcolor(GREEN);
	rectangle(midx-(wt*10),midy-(ht),midx+(wt*10),midy+ht);

	for(j=0;j<i+1;j++)
	outstr[j]='*';
	outstr[j]='\0';
	outtextxy(midx,midy,outstr);

	if (byte==13)   //Enter
	{
	pass_str[i]='\0';
	break;
	}

	if (byte==8)	//Backspace
	{
	i-=2;

	setcolor(BLACK);
	bar(midx-(wt*10),midy-(ht),midx+(wt*10),midy+ht);
	setcolor(GREEN);
	rectangle(midx-(wt*10),midy-(ht),midx+(wt*10),midy+ht);

	for(j=0;j<=i;j++)
	outstr[j]='*';
	outstr[j]='\0';
	outtextxy(midx,midy,outstr);

	continue;
	}
	pass_str[i]=byte;
}
   cleardevice();
   if(strcmp(pass_str,orginal_pass)==0)
   {
   outtextxy(200,120,"Access Permitted");
   return 0;

   }
   else
   {
   outtextxy (200,120,"Access denied");
   getpass(orginal_pass);
	}

 return 1;
}
void Dim(char c,char s)
{
	char i;
	switch(s)
	{
		case 1 :for(i=60;i>0;i--)
			{
			setrgbpalette(c,i,0,0);
			delay(15);
			}
			break;
		case 2 :for(i=60;i>0;i--)
			{
			setrgbpalette(c,0,i,0);
			delay(15);
			}
			break;
		case 3 :for(i=60;i>0;i--)
			{
			setrgbpalette(c,0,0,i);
			delay(15);
			}
			break;
	}
}

void Bright(char c,char s)
{
	char i;
	switch(s)
	{
		case 1 :for(i=0;i<60;i++)
			{
			setrgbpalette(c,i,0,0);
			delay(15);
			}
			break;
		case 2 :for(i=0;i<60;i++)
			{
			setrgbpalette(c,0,i,0);
			delay(15);
			}
			break;
		case 3 :for(i=0;i<60;i++)
			{
			setrgbpalette(c,0,0,i);
			delay(15);
			}
			break;
	}
}

void Enlarge(int x,int y,char c[])
{
	int i;
	setfillstyle(0,0);
	for(i=1;i<10;i++)
	{
		settextstyle(1,0,i);
		bar(x-24,y-25,x+23,y+55);
		outtextxy(x,y-i,c);
		delay(20);
	}
}

void Reduce(int x,int y,char c[])
{
	int i;
	setfillstyle(0,0);
	for(i=9;i>0;i--)
	{
		settextstyle(1,0,i);
		bar(x-33,y-29,x+33,y+58);
		outtextxy(x,y-i,c);
		delay(20);
	}
}

int cursor1[6][32]={
		{0x0000,0x0000,0x0000,0x0000,
		0x8001,0xc003,0xf00f,0xfc3f,
		0xfc3f,0xf00f,0xc003,0x8001,
		0x0000,0x0000,0x0000,0x0000,
		0xffff,0x8001,0xffff,0x8001,
		0x4002,0x2004,0x1008,0x0240,
		0x0240,0x0810,0x2004,0x4002,
		0x8001,0xffff,0x8001,0xffff},
		{0xe1ff,0xe1ff,0xe1ff,0xe1ff,
		0xe1ff,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x1e00,0x1200,0x1200,0x1200,
		0x13ff,0x1249,0x1249,0xf249,
		0x9001,0x9001,0x9001,0x8001,
		0x8001,0x8001,0xffff,0x0000},
		{0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0xffff,0xffff,0xfff7,0x0007,
		0x0007,0xeee7,0x0007,0x0007,
		0xeee7,0x0007,0x0007,0xeee7,
		0x0007,0x0007,0xeee7,0xeee7},
		{0xffff,0xf1c7,0xe013,0xc001,
		0x1000,0x1000,0x1000,0x1000,
		0xc001,0xe003,0xf007,0xf10f,
		0xfc1f,0xfe3f,0xff8f,0xffff,
		0x0000,0x0e38,0x1144,0x2082,
		0x4001,0x4001,0x4001,0x4001,
		0x2002,0x1004,0x0808,0x0410,
		0x0220,0x0140,0x0080,0x0000},
		{0xfeff,0xfd7f,0xfbbf,0xf7df,
		0xefef,0xdff7,0xbffb,0x7ffd,
		0x7ffd,0x7ffd,0x7ffd,0xbefb,
		0xdc77,0xe28f,0xfeff,0xfc7f,
		0x0100,0x0280,0x0440,0x0820,
		0x1010,0x2008,0x4004,0x8002,
		0x8002,0x8002,0x8002,0x4104,
		0x2388,0x1d70,0x0100,0x0380},
		{0xfeff,0xfd7f,0xfbbf,0xf7df,
		0xefef,0xdff7,0xbffb,0x7ffd,
		0x7ffd,0x7ffd,0x7ffd,0xbefb,
		0xdc77,0xe28f,0xfeff,0xfc7f,
		0x0100,0x0280,0x0440,0x0820,
		0x1010,0x2008,0x4004,0x8002,
		0x8002,0x8002,0x8002,0x4104,
		0x2388,0x1d70,0x0100,0x0380}};
		
char * boxin(int x,int y,int xlen, int ylen,char *finalstr)
{
   int midx, midy, ht,wt;
   char byte;
   char outstr[18];
   midx = x;
   midy = y;
   ht = textheight ("W");
   wt = textwidth  ("W");
   xlen*=wt;
   ylen*=ht;
   setcolor(GREEN);
   setbkcolor(BLACK);
   setfillstyle(SOLID_FILL,WHITE);
   settextjustify(CENTER_TEXT, CENTER_TEXT);
	setcolor(BLACK);
	bar(midx-xlen,midy-(ht),midx+(wt*10),midy+ylen);
	setcolor(GREEN);
	rectangle(midx-xlen,midy-ylen,midx+xlen,midy+ylen);

   int i =-1,j=0;
   for(finalstr[0]='\0';;)
   {

	byte=getch();
	i++;
	setcolor(BLACK);
	bar(midx-xlen,midy-ylen,midx+xlen,midy+ylen);
	setcolor(GREEN);
	rectangle(midx-xlen,midy-ylen,midx+xlen,midy+ylen);
	outstr[i]=byte;
	outstr[i+1]='\0';
	outtextxy(midx,midy,outstr);

	if (byte==ENTER)   //Enter
	{
	finalstr[i]='\0';
	break;
	}
	/*
TO MAKE UP USE LINKED LIST WHICH I THINK IS A BETTER iDEA
	if(byte==LEFTKEY)
	{
		
	}
	 *//*
	if(byte==RIGHTKEY)
	{
		
	} *//* 
	 if(byte==DEL)
	{
		
	} */

	 if (byte==BACKSPACE)	//Backspace
	{
	i-=2;
	setcolor(BLACK);
	bar(midx-xlen,midy-ylen,midx+xlen,midy+ylen);
	setcolor(GREEN);
	rectangle(midx-xlen,midy-ylen,midx+xlen,midy+ylen);
	outstr[i+1]='\0';
	outtextxy(midx,midy,outstr);
	continue;
	}
	finalstr[i]=byte;
	if(i>xlen/wt)
	{
	finalstr[i]='\0';
	break;
	}
}
   cleardevice();
 return (&finalstr[0]);
}